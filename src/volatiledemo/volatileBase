1.volatile（jvm提供的一种轻量级的同步机制）
1》保证可见性
2》不保证原子性
    原子性：不可分割，完整性，也就是说，某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要整体完整。要么同时成功，要么同时失败
3》禁止指令排序
    计算机在执行程序时，为了提高性能，编译器和处理器通常会对指令做重排，一般分为以下三种：
        源代码->编译器优化的重排->指令并行的重排->内存系统的重排->最终执行的指令

    a.在单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致。
    b.处理器在进行指令排序时必须考虑指令之间的数据依赖性。
    c.多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。



2.JMM（java内存模型）--抽象概念，并不真实存在
1》它的同步机制：
    a.线程解锁之前，必须把同步变量的值刷新回主内存；
    b.线程加锁之前，必须读取主内存的最新值到自己的工作内存中（共享变量副本）
    c.加锁解锁是同一把锁
2》流程大致如下：

             线程A                       线程B
               ｜                          ｜
               ｜                          ｜
            本地内存A                    本地内存B
          （共享变量副本）              （共享变量副本）
               ｜                          ｜
               ｜                          ｜
                  --------JMM控制----------
               ｜                          ｜
               ｜                          ｜
          -------------------------------------------
         ｜                  主内存                   ｜
         ｜     （共享变量）（共享变量）（共享变量）      ｜
         ｜----------------------------------------- ｜


